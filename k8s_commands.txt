$kubectl get pods

$kubectl get services

$kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
--> Create service of type NodePort and expose a port 

$kubectl describe services/kubernetes-bootcamp
>>To find out what port was opened externall and other details about the service

$kubectl describe deployment
>>The Deployment created automatically a label for our Pod.

$kubectl get pods -l run=kubernetes-bootcamp
>>use this label to query our list of Pods. Weâ€™ll use the kubectl get pods command with -l as a parameter, followed by the label values:


$kubectl get services -l run=kubernetes-bootcamp
>>You can do the same to list the existing services:


$kubectl label pod $POD_NAME app=v1
>>To apply a new label we use the label command followed by the object type, object name and the new label:

kubectl label pod myttpd-687bc7458b-b9284 app=v1


kubectl get pods -l app=v1
>>

$kubectl delete service -l run=kubernetes-bootcamp
>>Delete all the service with the label

$kubectl describe pods <pod-nmae>
> Details of the pod

$kubectl get pods -o wide 
>>more details than get pods


$kubectl create -f deployment-definition.yml
>>Create a deployment

$kubectl get deployments
>> Get deployments

$kubectl apply -f deployment-definition.yml
>>Update a deployment

$kubectl set image deploy/myapp-deployment --image nginx:1.9.1
>>Update the image for the deployment , the yml file wint chaneg

$kubectl rollout status deploy/myapp-deployment
>> wheneever  we create a deployment the a rollout is created whose staus can be seen by this command 

$kubectl rollout history deploy/myapp-deployment
>> whenever we do any update , a new revision is created, in oorder to see the command in the reveision we can use --record (kubectl create -f deployment-definition.yml --record)

$kubectl rollout undo deploy/myapp-deployment
>> whenever we do a rollback it goes to the previous revision and the previous revision is gone and a new revision is created
