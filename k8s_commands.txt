$kubectl get pods

$kubectl get services

$kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
--> Create service of type NodePort and expose a port 

$kubectl describe services/kubernetes-bootcamp
>>To find out what port was opened externall and other details about the service

$kubectl describe deployment
>>The Deployment created automatically a label for our Pod.

$kubectl get pods -l run=kubernetes-bootcamp
>>use this label to query our list of Pods. Weâ€™ll use the kubectl get pods command with -l as a parameter, followed by the label values:


$kubectl get services -l run=kubernetes-bootcamp
>>You can do the same to list the existing services:


$kubectl label pod $POD_NAME app=v1
>>To apply a new label we use the label command followed by the object type, object name and the new label:

kubectl label pod myttpd-687bc7458b-b9284 app=v1


kubectl get pods -l app=v1
>>

$kubectl delete service -l run=kubernetes-bootcamp
>>Delete all the service with the label

$kubectl describe pods <pod-nmae>
> Details of the pod

$kubectl get pods -o wide 
>>more details than get pods


$kubectl create -f deployment-definition.yml
>>Create a deployment

$kubectl get deployments
>> Get deployments

$kubectl apply -f deployment-definition.yml
>>Update a deployment

$kubectl set image deploy/myapp-deployment --image nginx:1.9.1
>>Update the image for the deployment , the yml file wint chaneg

$kubectl rollout status deploy/myapp-deployment
>> wheneever  we create a deployment the a rollout is created whose staus can be seen by this command 

$kubectl rollout history deploy/myapp-deployment
>> whenever we do any update , a new revision is created, in oorder to see the command in the reveision we can use --record (kubectl create -f deployment-definition.yml --record)

$kubectl rollout undo deploy/myapp-deployment
>> whenever we do a rollback it goes to the previous revision and the previous revision is gone and a new revision is created

Scale app:

>>kubectl replace -f replicatset-def.yml
>>kubectl scale --replicas=6 -f replicaset-def.yml
>>kubectl scale --replicas=6  replicaset my-replicaset
--> kubectl scale --replicas=<no of replicas> <Type of object> <name of the object>

Exporting yml for any object
$kubectl get replicaset -o yaml > new-replica-set.yml


Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
$kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run -o yaml

Create a deployment
$kubectl create deployment --image=nginx nginx

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
$kubectl create deployment --image=nginx nginx --dry-run -o yaml


Namespaces:

$kubectl create namespace dev
 
 >>Accesing a service in other namespace
  <service_name>.<namespace>.svc.cluster.local
>>By default we are in default namespace,to switch the default namespace use the below command

$kubectl config set-context $(kubectl config current-context) --namespace=dev

$kubectl get pods --namespace=dev

$kubectl get pods --all-namespaces

$kubectl run nginx --image=nginx --restart=Never
>> This tells the kubernetes not to create a deployment

$kubectl create service nodeport webapp-service --tcp 8080:8080 --dry-run -o yaml > service-def.yml
$ kubectl create service <typeOfService> <name-of-service> --tcp port:targetport --dry-run -o yaml > service-def.yml
>>Above are the minimum thing req to create a service , the above command does create the selector and it cant be  passed as well so use the below command

$kubectl expose pod redis --port=6379 --name redis-service --dry-run -o yaml

$kubectl expose pod nginx --port=80 --type NodePort --name nginx-service --dry-run -o yaml
--> Node port cant be provided , so the yaml needs to be edited

$ kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run -o yaml

$kubectl get ep webapp-service
>>Get endpoint for service

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)

kubectl create deployment --image=nginx nginx --dry-run -o yaml
>>>kubectl create deployment does not have a --replicas option. You could first create it and then scale it using the kubectl scale command.

kubectl create deployment --image=nginx nginx --dry-run -o yaml > nginx-deployment.yaml


NOTE:
 Only Job, Deployment, Replica Set, and Daemon Set support matchLabels.

 $kubectl get pods -l env=prod,tier=frontend,bu=finance
>> Multi label selector


Taints and tolerations

Node : Taint and POds has tolerations

master node always has a taint node-role.kubernetes.io/master:NoSchedule ,so no pods are scheduled on the node

 $ kubectl taint node node01 spary=mortein:NoSchedule
 $ kubectl describe node/node01 | grep Taints
Taints:             spary=mortein:NoSchedule

Effect cane be  NoSchedule,PreferNoSchedule,NoExecute

--To remove a taint from node
kubectl taint node master node-role.kubernetes.io/master:NoSchedule-


Node Selector & Node Affinity 

Label a node:
kubectl label node node01 key=values